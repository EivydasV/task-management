# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateTaskInput {
  assignedTo: String!
  description: String!
  parentTask: String
  priority: PRIORITIES!
  reporter: String!
  status: STATUS!
  subject: String!
  team: String!
}

input CreateTeamInput {
  name: String!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  password_confirmation: String!
}

type CursorPaginatedUser {
  edges: [cursorUserEdge!]
  nextCursor: String
  pageInfo: CursorPaginationArgs!
  totalDocs: Int!
  totalPages: Int!
}

type CursorPaginationArgs {
  cursor: String
  take: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ForgotPasswordInput {
  email: String!
}

input GetTaskInput {
  id: String!
}

input GetTasksByTeamInput {
  team: String!
}

input GetTeamInput {
  team: String!
}

input JoinTeamInput {
  team: String!
}

type JoinedTeam {
  _id: String!
  member: User!
  team: Team!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  createTask(createTaskInput: CreateTaskInput!): Task!
  createTeam(createTeamInput: CreateTeamInput!): Boolean!
  forgotPassword(forgotPasswordInput: ForgotPasswordInput!): Boolean!
  joinTeam(joinTeamInput: JoinTeamInput!): Boolean!
  login(loginInput: LoginUserInput!): Boolean!
  logout: Boolean!
  refreshSession: Boolean!
  register(registerInput: CreateUserInput!): Boolean!
  resetPassword(resetPasswordInput: ResetPasswordInput!): Boolean!
}

type OffsetPaginatedUser {
  currentPage: Int!
  edges: [offsetUserEdge!]
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nextPage: Int
  pageInfo: OffsetPaginationArgs!
  previousPage: Int
  totalDocs: Int!
  totalPages: Int!
}

type OffsetPaginationArgs {
  page: Float!
  take: Int!
}

enum PRIORITIES {
  HIGH
  LOW
  MEDIUM
}

type Query {
  findUsersCursor(cursor: String, take: Int! = 20): CursorPaginatedUser!
  findUsersOffset(page: Float! = 1, take: Int! = 20): OffsetPaginatedUser!
  getJoinedTeams: [JoinedTeam!]
  getMyCreatedTeams: [Team!]!
  getTask(getTaskInput: GetTaskInput!): Task
  getTasksByTeam(team: GetTasksByTeamInput!): [Task!]!
  getTeam(getTeam: GetTeamInput!): Team
  me: User!
}

input ResetPasswordInput {
  password: String!
  password_confirmation: String!
  token: String!
  userId: String!
}

enum STATUS {
  BACKLOG
  CODE_REVIEW
  DONE
  IN_PROGRESS
  QA
  TODO
}

type Task {
  _id: String!
  assignedTo: User!
  attachments: [String!]!
  createdBy: User!
  description: String
  parentTask: Task
  priority: String!
  reporter: User!
  status: String!
  subject: String!
  team: Task!
}

type Team {
  _id: String!
  createdBy: User!
  name: String!
}

type User {
  _id: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  role: String!
  updatedAt: DateTime!
}

type cursorUserEdge {
  cursor: String!
  node: User!
}

type offsetUserEdge {
  node: User!
}